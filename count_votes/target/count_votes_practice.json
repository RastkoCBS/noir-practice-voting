{"noir_version":"0.30.0+af57471035e4fa7eaffa71693219df6d029dbcde","hash":13069975536991757653,"abi":{"parameters":[{"name":"commitments","type":{"kind":"array","length":2,"type":{"kind":"field"}},"visibility":"public"},{"name":"votes","type":{"kind":"array","length":20,"type":{"kind":"integer","sign":"unsigned","width":32}},"visibility":"private"},{"name":"secrets","type":{"kind":"array","length":2,"type":{"kind":"field"}},"visibility":"private"}],"param_witnesses":{"commitments":[{"start":0,"end":2}],"secrets":[{"start":22,"end":24}],"votes":[{"start":2,"end":22}]},"return_type":{"abi_type":{"kind":"array","length":10,"type":{"kind":"integer","sign":"unsigned","width":32}},"visibility":"public"},"return_witnesses":[38,39,40,41,42,43,44,45,46,47],"error_types":{}},"bytecode":"H4sIAAAAAAAA/9WZ6U7bQBSFswEBsi9AIYuzlVLaxo7txP7XV0kUR63UKlVllbcf1be9SOaKX8MZSx5pdHOU3COfL9vMuFj4P5bJXPPjYjLLySwl00rpstAVoU+EPhX6TOiq0OdCXwh9KXRN6LrQDaGbQreEbgvdEbordE/ofkpX+XppXCVTMU/Fr1XMTzE3xbwUc1LsoZiLYh6KfRV73yTzXeHlKHH9ytV+23DSXq699rxos4oc19naq3AX+Lbn79aBEzh+4O9XgetGgRdswl24sUPHcyPn4Ifugc1ucNdlS87XzKXGtc61wbXJtcW1zbXDtcu1x7Wf4nybzDvDnItAzre467LTmcvgzCWgVw3Ib1DAfk6JG3lahZcDzbMM9KoDeQ4N8BxmwLMC9GoAeY4M8BxlwPME6NUE8hwb4DnOgOcp0KsF5GkZ4GllwPMM6NUG8pwY4DnJgGcV6NUB8pwa4DnNgOc50KsL5DkzwHOWAc8LoFcPyHNugOc8A56XQK8+kOfCAM/FKzzRe8IBkMF7IAOTmYfAzPc5yTwCZv6Qk8xjYOaHnGS2gJk/5iTzBJj5MSeZp8DMn3KSeQbM/DknmefAzF9yknkBzLwEZqZ1WYW9rlLZn+9V0dkTnZfQHp/2pbSXovU/rVnp7JjOO+mMjs6V6CyE9u+056R9Eq3t++x7nWJKo8g+NGiNRWsO+g+m/yT6jabfLPoO02ea3uNl6vU00vdvBly3cRz9/BVb8dHa7vfW0/f4m3X8E/0+/Dg+0fN3Gj1DjZ6xRs9Eo2em0bPQ6LnX6HnQ6HnU6Pk3/gLIp7SmkR0AAA==","debug_symbols":"1ZbBisIwEIbfZc49ZDKTtumrLMsStS6FkoqtC0vx3bdZbREVPch/8JZJfj4mAx/MSJt6dfj+auK266n6GKnt1mFoujhVI1nzf9fvQkxlP4T9QBUb1YzquElHb44ZbZu2pkrzY3YTLpnP2dLJ42iez9HCuCVq/Z2od8XSAfNl9jMjyy93XXhZunaX0YS3bzkUwQ5F7+P90hLzk5+KmX8qWl7jHRafY/EFFl9i8R6KF4PFMxZvsXjB4rHWCtZawVorWGsFa61grVWstYq1VrHWKtLaqfgJ+yas2jrtaOntENfzyjaVw+/u9DJl/wA=","file_map":{"29":{"source":"mod poseidon;\nmod mimc;\nmod poseidon2;\n\nuse crate::default::Default;\nuse crate::uint128::U128;\nuse crate::sha256::{digest, sha256_var};\n\n#[foreign(sha256)]\n// docs:start:sha256\npub fn sha256<N>(input: [u8; N]) -> [u8; 32]\n// docs:end:sha256\n{}\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<N>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<N>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\nstruct PedersenPoint {\n   x : Field,\n   y : Field,\n}\n\npub fn pedersen_commitment<N>(input: [Field; N]) -> PedersenPoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[foreign(pedersen_commitment)]\npub fn __pedersen_commitment_with_separator<N>(input: [Field; N], separator: u32) -> [Field; 2] {}\n\npub fn pedersen_commitment_with_separator<N>(input: [Field; N], separator: u32) -> PedersenPoint {\n    let values = __pedersen_commitment_with_separator(input, separator);\n    PedersenPoint { x: values[0], y: values[1] }\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<N>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[foreign(pedersen_hash)]\npub fn pedersen_hash_with_separator<N>(input: [Field; N], separator: u32) -> Field {}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes(32).as_array();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n#[foreign(keccak256)]\n// docs:start:keccak256\npub fn keccak256<N>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<N>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n#[foreign(sha256_compression)]\npub fn sha256_compression(_input: [u32; 16], _state: [u32; 8]) -> [u32; 8] {}\n\n// Generic hashing support. \n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\ntrait Hash{\n    fn hash<H>(self, state: &mut H) where H: Hasher;\n}\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\ntrait Hasher{\n    fn finish(self) -> Field;\n    \n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\ntrait BuildHasher<H> where H: Hasher{\n    fn build_hasher(self) -> H;\n}\n\nstruct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere \n    H: Hasher + Default\n{\n    fn build_hasher(_self: Self) -> H{\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere \n    H: Hasher + Default\n{\n    fn default() -> Self{\n        BuildHasherDefault{}\n    }    \n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H) where H: Hasher {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, N> Hash for [T; N] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B) where A: Hash, B: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C) where A: Hash, B: Hash, C: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D) where A: Hash, B: Hash, C: Hash, D: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E) where A: Hash, B: Hash, C: Hash, D: Hash, E: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n","path":"std/hash.nr"},"46":{"source":"use dep::std;\n\nglobal CANDIDATE_COUNT = 10;\nglobal VOTER_COUNT = 2;\n\nfn sum_votes(votes: [u32; CANDIDATE_COUNT * VOTER_COUNT]) -> [u32; CANDIDATE_COUNT] {\n    let mut total_votes = [0; CANDIDATE_COUNT];\n\n    for i in 0..VOTER_COUNT {\n        for j in 0..CANDIDATE_COUNT {\n            total_votes[j] = total_votes[j] + votes[i * CANDIDATE_COUNT + j];\n        }\n    }\n    total_votes\n}\n\nfn check_commitments(\n    commitments: [Field; VOTER_COUNT],\n    secrets: [Field; VOTER_COUNT],\n    votes: [u32; VOTER_COUNT * CANDIDATE_COUNT],\n) {\n    for i in 0..VOTER_COUNT {\n        let mut transcript = [0; CANDIDATE_COUNT + 1];\n        transcript[0] = secrets[i];\n        for j in 0..CANDIDATE_COUNT {\n            transcript[j + 1] = votes[i * CANDIDATE_COUNT + j] as Field;\n        };\n\n        assert(commitments[i] == std::hash::pedersen_commitment(transcript).x);\n    };\n}\n\nfn main(\n    commitments: pub [Field; VOTER_COUNT], \n    votes: [u32; VOTER_COUNT * CANDIDATE_COUNT], \n    secrets: [Field; VOTER_COUNT],\n) -> pub [u32; CANDIDATE_COUNT] {\n    check_commitments(commitments, secrets, votes);\n\n    sum_votes(votes)\n}\n// #[test]\n// fn test_main() {\n//     main(1, 2);\n\n//     // Uncomment to make test fail\n//     // main(1, 1);\n// }\n","path":"/home/rale11420/Projects/count_votes_practice/count_votes/src/main.nr"}},"names":["main"]}