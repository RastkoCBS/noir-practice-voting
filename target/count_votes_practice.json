{"noir_version":"0.30.0+af57471035e4fa7eaffa71693219df6d029dbcde","hash":14524331981771762846,"abi":{"parameters":[{"name":"token_budget","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"votes","type":{"kind":"array","length":10,"type":{"kind":"integer","sign":"unsigned","width":32}},"visibility":"private"}],"param_witnesses":{"token_budget":[{"start":0,"end":1}],"votes":[{"start":1,"end":11}]},"return_type":null,"return_witnesses":[],"error_types":{}},"bytecode":"H4sIAAAAAAAA/9WZbW/aMBSFk/BSCpTyVkppChmapmmaplySlOTb/gqIoFWiopqyVfv3q1WndR36oe49kWoJ2TeKfcxzD8ZObOuxzB4+kWzbD5+KbHtKbGuxo8UVLa5qcU2L61p8pMUNLT7W4qaM8zmL8lPW/vsK2XJMfdzAvw7DdLlIKaCVv0jWceSH0fo6ppiiONos4iBI4zBeJutk6ScUBiltoyTYyoFbfHP0cw4tIAdH5pmbQxvAoa1wyEuFmQdj/qjNyPMEwPME6Kt8veD2VQfAoVOCrxjzRx1GnqcAnqdAX4n/nCrAV10Ah24JvmLMH3UZefYAPHtAX4m9Sw3gqz6AQ78EXzHmj/qMPAcAngOgr8QeuA7w1RDAYViCrxjzR0NGnmcAnmdAX4mz1BHAVyMAh1EJvmLMH40YeZ4DeJ4DfSXO5A2Ar8YADuMSfMWYPxoz8rwA8LwA+ko82zkG+GoC4DApwVeM+aMJI89LAM9LoK/EM8ImwFcugINbgq8Y80cuI88rAM8rybMmx3WsYnGYfcGZKwYm5Cvz0gvX2CrXqazF+wSbWfBJOE/wzCr+YKofJKGG81rIedGU8TvOQEbjXnSnFu8ikXulpc3ZsZ5fYInFQxzQxWFKbHzFJqVpFctAabeV9idZr7Isvb3LvGzv3f7ZZTd3u3/e/U32y9v/TX9vd/t7cVPHtGNX6egWO642m2KfvqnY0EBsZCo2NhCbmIq5BmJTUzHPQGxuKvbZQOyLqdhXA7FvpmLfDcR+mIr5bxXLl8CGrOvKAPp+5ND+ZG69fP9qK9dtpU/FemkO9X5bGX+u9Dl0j/3KOK0D8+wduPYfWqHreVAgAAA=","debug_symbols":"tZdBasMwEEXvorUXHs3IdnyVUoqSOMVg5BA7hWJy98pts0hCVuHtNNLnLT4MDy1u323Pnx99OoyTa98WN4y7OPdjytPiRH7vpmNM6zjN8TS7VqQpXJf2+RSaS+EO/dC51qpL8RBVqf+j6m+i74UTT8KVhBsJD6/CS3kOr0h4TdbSkPANWIsvSTi5oZ7cUK9kLUbCA1lLRcJrspaGhG/AWrQk4QLWop6Ekw5V0qFKOlRJhyrpUCUdqqRDjXSokQ410qFGOtRIhxrpUCMdaqRDjXSovbyhdo1qHe7goSThQsI9Bs/DVzz1cTt06396fTun3fV7ncf5+/j3krM/","file_map":{"46":{"source":"global CANDIDATE_COUNT = 10;\nglobal VOTER_COUNT = 2;\n\nfn main(token_budget: u32, votes: [u32; CANDIDATE_COUNT]) {\n    check_within_budget(token_budget, votes);\n}\n\nfn check_within_budget(token_budget: u32, votes: [u32; CANDIDATE_COUNT]) {\n    let mut tokens_spent = 0;\n\n    for vote in votes {\n        tokens_spent += vote * vote;\n    }\n\n    assert(token_budget > tokens_spent);\n}\n\nfn sum_votes(all_votes: [u32; CANDIDATE_COUNT * VOTER_COUNT]) {\n    let mut total_votes = [0; CANDIDATE_COUNT];\n\n    for i in 0..VOTER_COUNT {\n        for j in 0..CANDIDATE_COUNT {\n            total_votes[j] = total_votes[j] + all_votes[i * CANDIDATE_COUNT + j];\n        }\n    }\n}\n\n\n// #[test]\n// fn test_main() {\n//     main(1, 2);\n\n//     // Uncomment to make test fail\n//     // main(1, 1);\n// }\n","path":"/home/rale11420/Projects/count_votes_practice/src/main.nr"}},"names":["main"]}